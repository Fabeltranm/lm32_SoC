
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .debug_abbrev 0000008b  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_info   0000010f  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_line   0000008e  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_frame  00000030  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000028  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cc  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000011  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 01 00 	ori gp,gp,0x100
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 00 fc 	ori r1,r1,0xfc
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 00 fc 	ori r3,r3,0xfc

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 13 	calli a8 <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <function>:
int function(int x){
  8c:	37 9c ff f8 	addi sp,sp,-8
  90:	5b 9d 00 04 	sw (sp+4),ra
  94:	5b 81 00 08 	sw (sp+8),r1
  return x;
  98:	2b 81 00 08 	lw r1,(sp+8)
}
  9c:	2b 9d 00 04 	lw ra,(sp+4)
  a0:	37 9c 00 08 	addi sp,sp,8
  a4:	c3 a0 00 00 	ret

000000a8 <main>:

int main(void)
{
  a8:	37 9c ff f8 	addi sp,sp,-8
  ac:	5b 9d 00 04 	sw (sp+4),ra


/*
  Comunicación con periféricos
*/
      data32 = (volatile unsigned int   *)(0x20000000);
  b0:	78 01 20 00 	mvhi r1,0x2000
  b4:	5b 81 00 08 	sw (sp+8),r1
      data32++;
  b8:	2b 81 00 08 	lw r1,(sp+8)
  bc:	34 21 00 04 	addi r1,r1,4
  c0:	5b 81 00 08 	sw (sp+8),r1
      *data32 = 0xAA;
  c4:	2b 81 00 08 	lw r1,(sp+8)
  c8:	34 02 00 aa 	mvi r2,170
  cc:	58 22 00 00 	sw (r1+0),r2
      data32 = (volatile unsigned int   *)(0x40000000);
  d0:	78 01 40 00 	mvhi r1,0x4000
  d4:	5b 81 00 08 	sw (sp+8),r1
      *data32 = 0x55;
  d8:	2b 81 00 08 	lw r1,(sp+8)
  dc:	34 02 00 55 	mvi r2,85
  e0:	58 22 00 00 	sw (r1+0),r2
      data32 = (volatile unsigned int   *)(0x60000000);
  e4:	78 01 60 00 	mvhi r1,0x6000
  e8:	5b 81 00 08 	sw (sp+8),r1
      *data32 = 0xFF;
  ec:	2b 81 00 08 	lw r1,(sp+8)
  f0:	34 02 00 ff 	mvi r2,255
  f4:	58 22 00 00 	sw (r1+0),r2
      
  while(1){

  }
  f8:	e0 00 00 00 	bi f8 <main+0x50>
